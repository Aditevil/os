# source is gitlab so we can't use github updates to get expected commit
# let's still auto create the PR, it will fail as expected commit will be wrong
# however it will be easy to fix
#nolint:git-checkout-must-use-github-updates
package:
  name: gitlab-17.1
  version: 17.1.1
  epoch: 0
  description: GitLab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more.
  copyright:
    - license: MIT

pipeline:
  - uses: git-checkout
    with:
      expected-commit: d0ac56e0be2576f3101025fb4a977a5e2a88d3ab
      repository: https://gitlab.com/gitlab-org/gitlab.git
      tag: v${{package.version}}-ee

subpackages:
  - name: ${{package.name}}-workhorse
    pipeline:
      - uses: go/bump
        with:
          deps: github.com/Azure/azure-sdk-for-go/sdk/azidentity@v1.6.0 golang.org/x/image@v0.18.0
          modroot: ./workhorse
      - uses: go/build
        with:
          modroot: ./workhorse
          packages: ./cmd/gitlab-workhorse
          output: gitlab-workhorse
      - uses: strip

  - name: ${{package.name}}-resize-image
    pipeline:
      - uses: go/build
        with:
          modroot: ./workhorse
          packages: ./cmd/gitlab-resize-image
          output: gitlab-resize-image
      - uses: strip

  - name: ${{package.name}}-zip-cat
    pipeline:
      - uses: go/build
        with:
          modroot: ./workhorse
          packages: ./cmd/gitlab-zip-cat
          output: gitlab-zip-cat
      - uses: strip

  - name: ${{package.name}}-zip-metadata
    pipeline:
      - uses: go/build
        with:
          modroot: ./workhorse
          packages: ./cmd/gitlab-zip-metadata
          output: gitlab-zip-metadata
      - uses: strip

update:
  manual: true
  enabled: true
  release-monitor:
    identifier: 373181

test:
  environment:
    contents:
      packages:
        - curl
        - redis
        - ${{package.name}}-workhorse
  pipeline:
    - runs: |
        #!/bin/bash

        set -e

        WORKHORSE_CONFIG=/tmp/workhorse-config.toml

        tee $WORKHORSE_CONFIG <<EOL
        [redis]
        URL = "redis://localhost:6379"

        [metadata]
          zip_reader_limit_bytes = 104857600

        [image_resizer]
          max_scaler_procs = 4
          max_filesize = 250000

        [[listeners]]
          network = "tcp"
          addr = "127.0.0.1:8181"
        EOL

        # Start Redis
        redis-server --daemonize yes

        # Start gitlab-workhorse with the configuration file
        gitlab-workhorse -config $WORKHORSE_CONFIG &
        PID=$!

        sleep 5
        # Check if the workhorse server is running
        if ! kill -0 $WORKHORSE_PID > /dev/null 2>&1; then
            echo "Workhorse server failed to start"
            exit 1
        fi

        # Test the health endpoint
        HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$WORKHORSE_PORT/-/health)
        if [ "$HTTP_RESPONSE" -ne 200 ]; then
          echo "Failed to get a valid response from the health endpoint"
          echo "HTTP response code: $HTTP_RESPONSE"
          kill $PID
          exit 1
        fi
