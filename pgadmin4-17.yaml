# pgAdmin4 17.0 is intended to support PostgreSQL 17.
# https://github.com/pgadmin-org/pgadmin4/blob/28eb2c0b4bcb229763cb0e160953e15ef9921dd4/Dockerfile#L119-L155
package:
  name: pgadmin4-17
  version: "8.14"
  epoch: 0
  description: "pgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world."
  copyright:
    - license: PostgreSQL
  dependencies:
    provides:
      - pgadmin4=${{package.full-version}}
    runtime:
      - python-${{vars.py-version}}
      - libpq-${{vars.pg-version}}
      - nodejs

vars:
  py-version: 3.13
  pg-version: 17

environment:
  contents:
    packages:
      - autoconf
      - automake
      - bash
      - build-base
      - busybox
      - gcc
      - glibc-locale-en
      - krb5-dev
      - libffi-dev
      - libjpeg-turbo-dev
      - libpng-dev
      - libpq-${{vars.pg-version}}
      - libtool
      - make
      - nasm
      - nodejs
      - npm
      - openssl-dev
      - pkgconf-dev
      - postgresql-${{vars.pg-version}}-contrib
      - postgresql-${{vars.pg-version}}-dev
      - py${{vars.py-version}}-pip
      - python-${{vars.py-version}}-dev
      - rust
      - yarn
      - yasm
      - zlib-dev

var-transforms:
  - from: ${{package.version}}
    match: '\.'
    replace: "_"
    to: mangled-package-version

pipeline:
  - uses: git-checkout
    with:
      expected-commit: 9e58717321a434519875773707df78c020bcde40
      repository: https://github.com/pgadmin-org/pgadmin4
      tag: REL-${{vars.mangled-package-version}}

  - name: BUilding Web Assests
    runs: |
      cd web
      export CPPFLAGS="$CPPFLAGS -DPNG_ARM_NEON_OPT=0"
      npm install -g corepack
      corepack enable
      yarn set version berry
      yarn set version 3
      yarn install
      yarn run bundle

  - name: Build package
    runs: |
      # Setup Python virtual environment
      python3 -m venv venv
      . venv/bin/activate

      # Upgrade basic tools
      pip install --upgrade pip

      # Install Python dependencies
      pip install -r requirements.txt
      pip install --no-cache-dir sphinx sphinxcontrib-youtube

      # Build documentation
      make docs

      # Build Python package
      make pip

      mkdir -p ${{targets.destdir}}/pgadmin4
      mkdir -p ${{targets.destdir}}/var/lib/pgadmin
      mkdir -p ${{targets.destdir}}/var/log/pgadmin

      # Copy in the code and docs
      cp -R web/* ${{targets.destdir}}/pgadmin4/
      cp -R docs/* ${{targets.destdir}}/pgadmin4/
      cp -R venv ${{targets.destdir}}/pgadmin4/
      cp ./pkg/docker/run_pgadmin.py ${{targets.destdir}}/pgadmin4/
      cp ./pkg/docker/gunicorn_config.py ${{targets.destdir}}/pgadmin4/
      cp ./pkg/docker/entrypoint.sh ${{targets.destdir}}/entrypoint.sh

      # License files
      cp -R ./LICENSE ${{targets.destdir}}/pgadmin4/
      cp -R ./DEPENDENCIES ${{targets.destdir}}/pgadmin4/

test:
  environment:
    contents:
      packages:
        - postgresql
        - postgresql-client
        - shadow
        - sudo-rs
        - python3
        - py3-pip
    environment:
      PGADMIN_SETUP_EMAIL: test@test.com
      PGADMIN_SETUP_PASSWORD: test123
      PGDATA: /tmp/test_db
      PGUSER: postgres
  pipeline:
    - name: "Test PostgreSQL setup and integration"
      runs: |
        # Add PostgreSQL user
        useradd $PGUSER
        sudo -u $PGUSER initdb -D $PGDATA
        sudo -u $PGUSER pg_ctl -D $PGDATA -l /tmp/logfile start

        # Wait for PostgreSQL to start
        sleep 5

        # Create a test database
        sudo -u postgres createdb testdb || (echo "Failed to create test database" && exit 1)
    - name: "Validate pgAdmin4 configuration"
      runs: |
        # Verify configuration
        python -c "from pgadmin4 import config; assert config.SERVER_MODE is True" || (echo "Config validation failed" && exit 1)
    - name: "Test pgAdmin4 functionality"
      runs: |
        # Initialize pgAdmin setup
        python -c "
        from pgadmin4.setup import setup_app
        setup_app(email='$PGADMIN_SETUP_EMAIL', password='$PGADMIN_SETUP_PASSWORD')
        " || (echo "pgAdmin4 setup failed" && exit 1)

        # Verify database creation
        test -f /var/lib/pgadmin/pgadmin4.db || (echo "pgAdmin4 database not created" && exit 1)

        # Check if log file is created
        test -f /var/log/pgadmin/pgadmin4.log || (echo "pgAdmin4 log file not found" && exit 1)

update:
  version-separator: _
  enabled: true
  github:
    identifier: pgadmin-org/pgadmin4
    strip-prefix: REL-
    tag-filter: REL-8
    use-tag: true
